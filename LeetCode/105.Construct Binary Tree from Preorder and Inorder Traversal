/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if(!preorder.size()) return nullptr;
        stack<TreeNode *> stk;
        int i = 0, j = 0, flag = 0;
        TreeNode *root, *temp;
        root = new TreeNode(preorder[i]);
        i++;
        temp = root;
        stk.push(root);
        while(i < preorder.size()){
            if(!stk.empty() && stk.top() -> val == inorder[j]){
                temp = stk.top();
                stk.pop();
                j++;
                flag = 1;
            }else{
                if(flag == 0){//add treenode to left child
                    temp -> left = new TreeNode(preorder[i]);
                    temp = temp -> left;
                    stk.push(temp);
                    i++;
                }else{
                    flag = 0;
                    temp -> right = new TreeNode(preorder[i]);
                    temp = temp -> right;
                    stk.push(temp);
                    i++;
                }
            }
        }
        return root;
    }
};
