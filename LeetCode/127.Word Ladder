class Solution {
public:
    int ladderLength(string beginWord, string endWord, unordered_set<string>& wordList) {
        wordList.insert(endWord);
        queue<string> toVisit;
		addNextWords(beginWord, wordList, toVisit);
		int level = 2;
		while(!toVisit.empty()){
			int size = toVisit.size();
			for(int i = 0; i < size; ++i){
				string word = toVisit.front();
				toVisit.pop();
				if(word == endWord) return level;
				addNextWords(word, wordList, toVisit);
			}
			level++;
		}
		return 0;
    }
private:
	void addNextWords(string word, unordered_set<string>& wordList, queue<string>& toVisit){
		for(int p = 0; p < word.length(); ++p){
			char letter = word[p];
			for(int k = 0; k < 26; ++k){
				word[p] = 'a' + k;
				if(wordList.find(word) != wordList.end()){
					toVisit.push(word);
					wordList.erase(word);
				}
			}
			word[p] = letter;
		}
    }
};
